plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example.mockbean'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    /*
    implementation project(':')
    This establishes a dependency from SubProjectA to the root project. Now, the classes and resources in the main source set of your root project should be accessible within SubProjectA, allowing your integration test classes (like AIntegrationTest) to use the root project's main code.
    You should now be able to reference classes from the root project in your integration tests within SubProjectA.
    project(':') means, this subproject depends on the root project
    For more info check: /doc/README.md
     **/
    implementation project(':')
}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    mainClass = 'com.example.mockbean.DemoMockBeanIntegrationTest.SubProjectA'
}

bootJar {
    mainClass = 'com.example.mockbean.DemoMockBeanIntegrationTest.SubProjectA'
}

// This to set the directory structure for the source sets such as main and test for gradle to identify correctly.
sourceSets {
    main {
        java {
            srcDirs = ['src/src/main/java']
        }
        resources {
            srcDirs = ['src/src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/src/test/java']
        }
        resources {
            srcDirs = ['src/src/test/resources']
        }
    }
} 