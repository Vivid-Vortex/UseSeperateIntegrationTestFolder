plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example.mockbean'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

// This to set the directory structure for the source sets such as main and test for gradle to identify correctly.
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    integrationTest {
        java {
            srcDirs = ['src/integrationTest/java']
        }
        resources {
            srcDirs = ['src/integrationTest/resources', 'src/main/resources', 'src/test/resources'] // second and thried argument mens to let access resources fodler under main and test for integrationTest classes
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    /*
    implementation project(':')
    This establishes a dependency from SubProjectA to the root project. Now, the classes and resources in the main source set of your root project should be accessible within SubProjectA, allowing your integration test classes (like AIntegrationTest) to use the root project's main code.
    You should now be able to reference classes from the root project in your integration tests within SubProjectA.
    project(':') means, this subproject depends on the root project
    For more info check: /doc/README.md
     **/
    implementation project(':')

    // Dependencies for integration tests
    /**
     * If these lines were uncommented and active, this block would suggest a project setup where:
     *
     * Integration tests are clearly separated: They reside in their own integrationTest source set.
     * Multi-module architecture: The current project is part of a larger multi-project build and needs to test against another subproject (SubProjectA).
     * Spring Boot Testing: The integration tests heavily rely on Spring Boot's testing capabilities.
     * Mockito for Mocking: Mocking is used in these integration tests.
     * JUnit 5 as Test Framework: JUnit 5 is the chosen test framework, and its platform launcher is included for proper test execution.
     */
    // integrationTestImplementation project(path: ':SubProjectA', configuration: 'main')
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
//    integrationTestImplementation 'org.mockito:mockito-core'
//    integrationTestImplementation 'org.mockito:mockito-junit-jupiter'
//    integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Add other test dependencies here if needed for integration tests that are NOT in main or test
    integrationTestImplementation sourceSets.main.output // This is a direct way to ensure the compiled classes from main are on the classpath for integrationTest.
}

tasks.named('test') {
    useJUnitPlatform()
}

bootRun {
    mainClass = 'com.example.mockbean.DemoMockBeanIntegrationTest.SubProjectA'
}

bootJar {
    mainClass = 'com.example.mockbean.DemoMockBeanIntegrationTest.SubProjectA'
}

//This is to ensure your integrationTest source set inherits all the dependencies from your main source set. You do this by making the integrationTestImplementation configuration extend implementation, and integrationTestRuntimeOnly extend runtimeOnly
// Essential inherit dependencies from main
configurations {
    integrationTestImplementation.extendsFrom(implementation)
    integrationTestRuntimeOnly.extendsFrom(runtimeOnly)
}


tasks.register('integrationTest', Test) {
    description = 'Runs the integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    shouldRunAfter test

    useJUnitPlatform()
}

// Ensure integration tests are run as part of the 'check' task
check {
    dependsOn integrationTest
} 